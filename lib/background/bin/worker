#! /usr/bin/env ruby
# encoding: utf-8

$LOAD_PATH.push File.expand_path("../../lib", __FILE__)
$LOAD_PATH.push File.expand_path("../../workers", __FILE__)
$stdout.sync = true

# Load development tools
if ENV['RAILS_ENV'] == 'development'
  require 'pry'
end

require 'helpers/console_colors'

ruby_version = `ruby -v`.chomp
if match = ruby_version.to_s.match(/(\d\.\d\.\d)(p(\d{1,3}))?/i)
  if match[0] != "1.9.3" && match[3].to_i < 125
    puts "Workers need MRI with a minimum version of 1.9.3p125 to run".as_color(:red)
    puts "You are running #{ruby_version}"
    exit
  end
end

require 'worker'

def assert_command_name(command,regex,assertion,help)
  if !command.nil? && command.match(regex)
    return command.downcase
  else
    puts assertion
    puts help
    return exit
  end
end

def fail_or_pass(bool)
  if bool
    "\t... " + "ok\n".as_color(:green)
  else
    "\t... " + "fail\n".as_color(:red)
  end
end

def stop(options={})
  
  Worker.stop(@worker_name).each do |pid|
    print "Stopping worker #{pid.to_s.as_color(:red)}"
    print fail_or_pass Worker.pid_alive?(pid)
  end
  
end

def start(options={})
  
  worker = Worker.load_by_name(@worker_name)

  if options[:deamonize]
    
    ammount_of_workers = options[:ammount] || 1
    # Load all code for specified worker
    
    ammount_of_workers.times do |i|
      pid = Worker.spawn(worker)
      print "Spawning worker #{pid.to_s.as_color(:red)}"
      print fail_or_pass Worker.pid_alive?(pid)
    end
    
  else
    
    print "Starting #{@worker_name} worker...\n"
    Worker.start(worker,options)
    
  end
  
end

@command = ARGV[0] || ""
@command = assert_command_name(@command, /^start$|^stop$|^restart$|^status$/i,
  "\n#{@command.as_color(:blue)} - Is not a valid command.\n",
  "Try #{"start".as_color(:green)}, #{"stop".as_color(:red)} or #{"restart".as_color(:yellow)}\n\n"
)

@worker_name = ARGV[1] || ""
@worker_name = assert_command_name(@worker_name, /^messages|faye$/i,
  "\n#{@worker_name.as_color(:blue)} worker does not exist.\n",
  "Available workers: #{ Worker::AVAILABLE_WORKERS.map{ |w| w = w.as_color(:yellow) }.join(", ") }\n\n"
)

@options = {}

OptionParser.new do |opts|
  
  opts.banner = "Usage: ./worker [worker name] [worker action] [options]"

  opts.on("-d", "--deamonize", "Forks processes of the workers and daemonizes them") do |val|
    @options[:deamonize] = val || false
  end
  
end.parse!


case @command.to_sym
when :start
  
  ammount_of_workers = 1
  
  puts "\nStarting #{ammount_of_workers.to_s.as_color(:blue)} #{@worker_name} worker(s)" if @options[:deamonize]
  
  start(ammount: ammount_of_workers, deamonize: @options[:deamonize] )
  
when :stop
  
  pids_to_stop = Worker.pids(@worker_name).size
  
  puts "\nStopping #{pids_to_stop.to_s.as_color(:blue)} #{@worker_name} worker(s)\n"
  
  stop
  
when :restart
  
  pids_to_restart = Worker.pids(@worker_name).size
  
  puts "\nRestarting #{pids_to_restart.to_s.as_color(:blue)} #{@worker_name} workers(s)\n"
  
  stop
  
  start(ammount: pids_to_restart)

when :status
  
  pids_alive = Worker.pids(@worker_name).size
  
  puts "\nStatus for #{pids_alive.to_s.as_color(:blue)} #{@worker_name} worker(s)\n"
  
end

puts ""