class ApplicationController < ActionController::Base
  
  helper_method :current_user, :markdown
  
  rescue_from CanCan::AccessDenied do |exception|
    if current_user
      flash[:error] = "Access denied, you're not authorized to perform this action. We've taken notice of this attempt"
      redirect_to root_path
    else
      session[:original_path] = request.path
      flash[:warning] = "You have to be signed in to do that."
      redirect_to login_path
    end
  end
  
  before_filter :redirect_on_maintenance!
  before_filter :force_password_change!
  before_filter :set_time_zone_for_user!
  before_filter :log_additional_exception_data
  
  before_filter do
    response.headers["controller"], response.headers["action"] = controller_name.parameterize, action_name.parameterize
  end

  protect_from_forgery
  
  def render(options = nil, extra_options = {}, &block)
    if request.headers['X-PJAX'] == 'true'
      options = {} if options.nil?
      options[:layout] = false 
    end
    super(options, extra_options, &block)
  end
  
  def authenticated?
    raise CanCan::AccessDenied.new unless current_user
  end
  
  def current_user
    @current_user ||= User.find(session[:user_id]) if session[:user_id]
  end
  
  def authenticate!(user)
    # Denies access if no user is present
    raise CanCan::AccessDenied if user.nil?
    # Logs what agent is used
    UserAgent.find_or_create_from_http_request_with_user(request.env['HTTP_USER_AGENT'],user) unless request.env['HTTP_USER_AGENT'].nil?
    # Sets session data
    session[:user_id] = user.id
    session[:display_name] = user.name
    @current_user = user
  end
  
  def faye_broadcast(channel, data)
    message = { channel: channel, data: data, ext: { auth_token: FAYE_TOKEN } }
    Net::HTTP.post_form(Cloudsdale.faye_path(:inhouse), message: message.to_json)
  end
  
  private
  
  def render_and_act_as(controller,action,lo="application")
    params[:controller], params[:action] = controller, action
    render "#{controller.to_s}/#{action.to_s}", :layout => lo
  end
  
  def unless_pending_request_go_to(fallback_path)
    pending_path = session[:original_path]
    if pending_path
      session[:original_path] = nil
      pending_path
    else
      fallback_path
    end
  end
  
  def markdown(text)
    if text
      options = [:hard_wrap, :filter_html, :autolink, :no_intraemphasis, :fenced_code, :gh_blockcode]
      Redcarpet.new(text, *options).to_html.html_safe
    end
  end
  
  # Takes the errors generated by a rails model and
  # transforms them into a readable string.
  def errors_to_string(errors)
    str = ""
    errors.each{|k,v|str+="#{k.to_s.gsub(/[\.\_\-]/i,' ')}: #{v}"}
    flash[:error] = str
  end
  
  protected

  # Forces the users to change their passwords if they are flagged to do so.
  def force_password_change!
    if current_user.try(:force_password_change?) == true
      flash[:alert] = "Please change your password before proceeding."
      redirect_to change_password_user_path(current_user)
    end
  end
  
  # Internal: Forces users that are not of role moderator or higher to get redirected to
  # the maintenence page. The site will still work as normal even though maintenance
  # mode is activated for the users with sufficient rights.
  #
  # Returns nothing of intrest.
  def redirect_on_maintenance!
    if MAINTENANCE
      unless current_user and current_user.role >= 2
        redirect_to maintenance_path
      end
    end
  end
  
  def set_time_zone_for_user!
    Time.zone = current_user.time_zone if current_user and current_user.time_zone
  end
  
  def log_additional_exception_data
    request.env["exception_notifier.exception_data"] = {
      :user => @current_user
    }
  end
  
end
