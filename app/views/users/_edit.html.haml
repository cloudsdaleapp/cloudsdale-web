= form_for user, :validate => true, :remote => true, :url => user_path(user), :method => :put, :html => { :class => 'with_notifications' } do |f|
  %h4 Authentications
  %ul#connected_accounts
    - user.authentications.each do |authentication|
      %li{ :class => authentication.provider  }= link_to image_tag("icons/cloud/#{authentication.provider}_cloud.png"), authentication_path(authentication), :method => :delete
    - auth_providers = user.authentications.map {|a| a.provider }
    - unless auth_providers.include?("facebook")
      %li.not_connected.facebook= link_to image_tag("icons/cloud/facebook_cloud.png"), "/auth/facebook"
    - unless auth_providers.include?("twitter")
      %li.not_connected.twitter= link_to image_tag("icons/cloud/twitter_cloud.png"), "/auth/twitter"
      
  %h4 Account
  .fieldset
    .field
      = f.text_field :email, :placeholder => "Email"
    .field
      = f.password_field :password, :placeholder => "New password..."
    .field
      = f.password_field :password_confirmation, :placeholder => "Confirm please..."
    
  %h4 Character
  .fieldset
    = f.fields_for :character do |char_f|
      .field.name
        = char_f.text_field :name, :placeholder => "Pony name...", :original_value => char_f.object.name, :attribute_name => :name, :user_id => user.id
      .field.options
        = char_f.select(:kind, options_for_select(Character::KINDS.collect{ |k| [k.capitalize, k] }, char_f.object.kind))
        = char_f.select(:gender, options_for_select(Character::GENDERS.collect{ |g| [g.capitalize, g] }, char_f.object.gender))
  .field.tools
    = f.submit "Save"

:javascript
  $('form[data-validate]').validate();