.content-panel
  .content-panel-inner
    :markdown
      ### oAuth Authentication Gateway
      Cloudsdale is its own oAuth 2 provider, you can set up
      your application to allow users to log in to Cloudsdale,
      and send back tokens to your own service, granting you access
      to talk with Cloudsdale on that user's behalf. It consists
      of an exchange of an authorization token for an access token.
      For more detailed info, check out the
      [RFC spec here](http://tools.ietf.org/html/rfc6749#section-4.1)

%br
%h3= "Getting Started"
%hr
%h4.subheader= "Registering a Client"
- if current_user.new_record?
  :markdown
    To create an application you must first log in to the Cloudsdale
    developer portal by using your regular Cloudsdale account. After
    you're logged in you will be prompted to connect your GitHub account
    to verify yourself as a developer.
  = link_to "Login to Cloudsdale", login_path(redirect_url: '/auth/github')
- else
  :markdown
    As you're logged in to the Cloudsdale developer portal, you can visit
    #{new_application_url}. Fill in the correct credentials to match your
    application.
%br
%br
.content-panel
  .content-panel-inner.panel-expand
    = image_tag "tut/oauth_register.png"
%br

:markdown
  Once you've registered your app it will appear in the on the list of the
  apps front page found at #{applications_url} for easy access in the future.

%hr
%h4.subheader= "Request Authorization Token"

:markdown
  When your application is set up, you will be able to start requesting authorization
  tokens by redirecting your users to our authorization path for your app
  with a few parameters like this:

.content-panel
  .content-panel-inner.panel-expand
    :markdown
      ```
        #{oauth_authorization_url(subdomain: "www")}?client_id=YOUR_CLIENT_ID&redirect_uri=http://example.com/oauth/callback&response_type=code
      ```
%br

:markdown
  Once you are there, you should sign in and click on **Permit**.

  You'll see this page:

.content-panel
  .content-panel-inner.panel-expand
    = image_tag "tut/oauth_permit_access.png"
%br

:markdown
  You can test authorization by clicking the **Test Authorize** button located
  on your application page. It's a link to the same page with pre-generated
  parameters for your app.


%hr
%h4.subheader= "Requesting the Access Token (Authorization Code)"

:markdown
  To request the access token, you should use the returned code and exchange
  it for an access token. To do that you can use any HTTP client.


%h6= "End Point:"
.panel
  %code
    = "POST #{oauth_token_url(subdomain: "api")}"

%h6= "Accepted Parameters:"
%ul.inline-list
  - [:client_id,:client_secret,:code,:grant_type,:redirect_uri].each do |param|
    %li
      %span.keystroke{ style: 'padding: 0 7px;' }= param
%br

.content-panel
  .content-panel-inner.panel-expand
    .panel-header= "Ruby Example"
    :markdown

      ```ruby
      require 'rest-client'

      parameters = "
        client_id=THE_ID
        &client_secret=THE_SECRET
        &code=RETURNED_CODE
        &grant_type=authorization_code
        &redirect_uri=http://example.com/oauth/callback
      ".chomp

      RestClient.post '#{oauth_token_url(subdomain: "api")}', parameters
      # {
      #   "refresh_token": nil,
      #   "access_token": "access token",
      #   "token_type": "bearer",
      #   "expires_in": nil,
      #   "scope":"read"
      # }
      ```
%hr
%h4.subheader= "Requesting the Access Token (User Credentials)"
:markdown
  To Official Cloudsdale applications (certified by Cloudsdale staff),
  you can also request access tokens by providing our endpoint with the
  user's Cloudsdale Account password with username or email combination.

  This is highly useful writing native applications without having to bring
  in web views to let people login in order to permit access. You can now
  create your own login and forward the credentials to our API's.

%h6= "End Point:"
.panel
  %code
    = "POST #{oauth_token_url(subdomain: "api")}"

%h6= "Accepted Parameters:"
%ul.inline-list
  - [:client_id,:client_secret,:identifier,:password,:grant_type,:redirect_uri].each do |param|
    %li
      %span.keystroke{ style: 'padding: 0 7px;' }= param
%br

.content-panel
  .content-panel-inner.panel-expand
    .panel-header= "Ruby Example"
    :markdown
      ```ruby
      require 'rest-client'

      parameters = "
        client_id=THE_ID
        &client_secret=THE_SECRET
        &password=PASSOWRD
        &identifier=EMAIL/USERNAME
        &grant_type=password
      ".chomp

      RestClient.post '#{oauth_token_url(subdomain: "api")}', parameters
      # {
      #   "refresh_token": nil,
      #   "access_token": "access token",
      #   "token_type": "bearer",
      #   "expires_in": nil,
      #   "scope":"read"
      # }
      ```

%hr
%h4.subheader= "oAuth Libraries"
%br

%h6.subheader= "Ruby"
%ul{ style: 'padding-left: 20px;'}
  %li
    = link_to "Cloudsdale Omniauth Strategy (Official)", "http://rubygems.org/gems/omniauth-cloudsdale", target: :_blank, title: 'Cloudsdale Omniauth Strategy (Ruby)'
    %span{ style: 'width: 14px; display: inline-block; text-align: center;' }= "â€“"
    = link_to "GitHub", "https://github.com/cloudsdaleapp/omniauth-cloudsdale", target: :_blank, title: 'Cloudsdale Omniauth Strategy (Ruby)'
