do ($ = jQuery) ->

  window.globalNotifications = 0

  $(window).blur =>
    window.addGlobalNotification(0) if window.globalNotifications > 0

  window.clearGlobalNotification = ->
    window.globalNotifications = 0
    window.setGlobalNotification()

  window.addGlobalNotification = (num) ->
    window.globalNotifications += num
    if window.globalNotifications > 0
      window.setGlobalNotification()
    else
      window.clearGlobalNotification()

  window.subtractGlobalNotification = (num) ->
    window.globalNotifications -= num
    if window.globalNotifications > 0
      window.setGlobalNotification()
    else
      window.clearGlobalNotification()

  window.setGlobalNotification = ->
    $.titleAlert "(#{window.globalNotifications}) new event(s)",
      requireBlur: true
      stopOnFocus: true
      duration: 0
      interval: 1500

  window.version = null

  window.NotificationCentre = class NotificationCentre

    constructor: (args) ->

      ChannelNameExt = {

        incoming: (message,callback) ->

          message.data ||= {}

          if m = /^\/clouds\/(.{24})\/users\/(.{24})$/ig.exec(message.channel)
            message.data.id = m[2]

          callback(message)
      }

      UserAuthExt = {

        outgoing: (message,callback) ->
          message.ext = {} unless message.ext

          if window.session
            authToken = window.session.get('user').get('auth_token')
            message.ext.auth_token = authToken

          callback(message)
      }

      secure_server = "<%= Figaro.env.faye_https_url! %>"
      normal_server = "<%= Figaro.env.faye_http_url! %>"
      server_path = if isSecure() then secure_server else normal_server

      @cli = new Faye.Client(server_path, {
        timeout: 120,
        endpoints: {
          websocket: server_path
        }
      })

      @cli.addExtension(ChannelNameExt)
      @cli.addExtension(UserAuthExt)

      subscription = @cli.subscribe '/web', (payload) ->
        if payload.version != window.version
          $.event.trigger "notifications:add", {
            header: "Site Update!",
            body: "#{payload.message}, click here to activate update.",
            callback: =>
              document.location.reload(true)
          }

      @cli.subscribe '/announcements/web', (payload) ->
        if payload.version != window.version
          $.event.trigger "notifications:add", {
            header: payload.title,
            body:   payload.message,
            callback: =>
              if payload.url
                sameHost =   payload.url.match(document.location.hostname) != null
                notAuth =    payload.url.match(/\/auth\/.*/ig) == null
                notLogout =  payload.url.match(/\/logout/ig) == null

                if sameHost && notAuth && notLogout
                  Backbone.history.navigate(@pathname,true)
                else
                  win = window.open(payload.url, '_blank')
                  win.focus()
              else
                document.location.reload(true)
          }


      subscription.callback =>
        if @cli.getState() == 'CONNECTED'
          $.event.trigger "connected:nfc"

      subscription.errback =>
        if @cli.getState() == 'CONNECTED'
          $.event.trigger "connected:nfc"

    state: ->
      @cli.getState()

    # Use this to start listening to a specific channel
    on: (event,f) ->

      channel = "/#{event.replace(/\:/ig,"/")}" # The event name translated to Faye channel

      if @cli._channels._channels[channel] == undefined
        subscription = @cli.subscribe channel, (payload) ->
          console.log event, payload if session.get('user').get('role') == "founder"
          $.event.trigger "#{event}", payload

      $(document).bind "#{event}", (event,payload) ->
        f(payload)

      this

    off: (event) ->

      channel = "/#{event.replace(/\:/ig,"/")}"

      @cli.unsubscribe channel

      $(document).unbind("#{event}")

      this

    # Use this to simulate an incomming payload
    t: (event,data) -> $.event.trigger "#{event}", data
