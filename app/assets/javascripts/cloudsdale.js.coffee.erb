# Let's backbone handle Cloudsdale API calls by default.
Backbone.Model.prototype.parse = (resp, xhr) -> if resp.result then resp.result else resp
Backbone.Collection.prototype.parse = (resp, xhr) -> if resp.result then resp.result else resp

window.railsRestSync = (method, model, options) ->
  if method == 'GET'
    options.url = model.url() + "/#{model.id}.json"
  else
    options.url = model.url()
  return Backbone.sync(method, model, options)

window.renderErrorPageFrom = (response) ->
  status = response.status
  
  if status == 404
    Backbone.history.navigate("/notfound",true)
  else if status == 403
    Backbone.history.navigate("/unauthorized",true)
  else
    Backbone.history.navigate("/error",true)

window.deparam = (paramString) ->
  result = {}
  return result  unless paramString
  $.each paramString.split("&"), (index, value) ->
    if value
      param = value.split("=")
      result[param[0]] = param[1].replace(/\+/gi," ")

  result

window.getObjectClass = (obj) ->
  if obj and obj.constructor and obj.constructor.toString
    arr = obj.constructor.toString().match(/function\s*(\w+)/)
    return arr[1]  if arr and arr.length is 2
    
  undefined

window.escapeHTML = (html) ->
  escaped = html
  findReplace = [ [ /&/g, "&amp;" ], [ /</g, "&lt;" ], [ />/g, "&gt;" ], [ /"/g, "&quot;" ], [ /\\\\/g, "&#92;" ] ]
  for item of findReplace
    escaped = escaped.replace(findReplace[item][0], findReplace[item][1])
  
  return escaped

window.merge_options = (obj1, obj2) ->
  obj3 = {}
  for attrname of obj1
    obj3[attrname] = obj1[attrname]
  for attrname of obj2
    obj3[attrname] = obj2[attrname]
  obj3

window.resizeBottomWrapper = (elems) ->
  elems = $('.cloud-sidebar-bottom') unless elems
  if window.outerWidth > 480
    $.each elems, (i,elem) ->
      setTimeout ->
        topDistance = $(elem).prev().outerHeight()
        $(elem).css
          position: 'absolute'
          left: 0
          right: 0
          top: topDistance
          bottom: 0
      , 100

window.isMobile =
  Android: ->
    (if navigator.userAgent.match(/Android/i) then true else false)

  BlackBerry: ->
    (if navigator.userAgent.match(/BlackBerry/i) then true else false)

  iOS: ->
    (if navigator.userAgent.match(/iPhone|iPad|iPod/i) then true else false)

  Windows: ->
    (if navigator.userAgent.match(/IEMobile/i) then true else false)

  any: ->
    isMobile.Android() or isMobile.BlackBerry() or isMobile.iOS() or isMobile.Windows()
      
$(window).bind 'resize', (e) ->
  resizeBottomWrapper()
  

window.Cloudsdale =
  Models: {}
  Collections: {}
  Views: {}
  Routers: {}
  init: ->
    new Cloudsdale.Routers.Root()
    new Cloudsdale.Routers.Clouds()
    Backbone.history.start({pushState: true})
    window.app = Backbone.history
    
$('a[rel="safe"]').live 'click', (event,target) ->
  _href = @href.match /([a-z]{1,6}\:\/\/)([a-z0-9\.\,\-\_\:]*)(\/?[a-z0-9\!\'\"\.\,\-\_\/\?\:\&\=\#\%\+\(\)]*)/i
  
  protocol = _href[1]
  top_dom = _href[2]
  path = _href[3]
  
  inhouse = (top_dom.match(/cloudsdale.org/i) != null)
  
  if inhouse
    event.preventDefault()
    Backbone.history.navigate(path,true)
    return false
  else
    return @
    
$(document).ready ->
  # Initializes the notification centre
  window.nfc = new NotificationCentre()
  
  # Sets the session for the current user
  window.session = new Cloudsdale.Models.Session($('body').data().session)
  
  $(document).bind "connected:nfc", ->
    
    # Changes an attribute to the document if focused
    # Initializes as true
    window.window_focus = true
    $(window).focus(-> document.window_focus = true).blur(-> document.window_focus = false)
  
    # Initializes the root view.
    view = new Cloudsdale.Views.Root()
    $('body').replaceWith(view.el)
    
    Cloudsdale.init()
    
    # iPad, iPhone & iPod installed web-app top margin correction.
    setTimeout (->
      if (navigator.userAgent.match(/iPhone|iPod|iPad/i))
        $("body").addClass('device-ios')
        if ("standalone" of window.navigator) and window.navigator.standalone
          $("body").addClass('device-ios-standalone')
            
    ), 0
  