# Let's backbone handle Cloudsdale API calls by default.
Backbone.Model.prototype.parse = (resp, xhr) -> if resp.result then resp.result else resp
Backbone.Collection.prototype.parse = (resp, xhr) -> if resp.result then resp.result else resp

window.railsRestSync = (method, model, options) ->
  if method == 'GET'
    options.url = model.url() + "/#{model.id}.json"
  else
    options.url = model.url()
  return Backbone.sync(method, model, options)

window.renderErrorPageFrom = (response) ->
  status = response.status
  
  if status == 404
    Backbone.history.navigate("/notfound",true)
  else if status == 403
    Backbone.history.navigate("/unauthorized",true)
  else
    Backbone.history.navigate("/error",true)

window.deparam = (paramString) ->
  result = {}
  return result  unless paramString
  $.each paramString.split("&"), (index, value) ->
    if value
      param = value.split("=")
      result[param[0]] = param[1].replace(/\+/gi," ")

  result

window.getObjectClass = (obj) ->
  if obj and obj.constructor and obj.constructor.toString
    arr = obj.constructor.toString().match(/function\s*(\w+)/)
    return arr[1]  if arr and arr.length is 2
    
  undefined

window.escapeHTML = (html) ->
  escaped = html
  findReplace = [ [ /&/g, "&amp;" ], [ /</g, "&lt;" ], [ />/g, "&gt;" ], [ /"/g, "&quot;" ] ]
  for item of findReplace
    escaped = escaped.replace(findReplace[item][0], findReplace[item][1])
  
  return escaped

window.Cloudsdale =
  Models: {}
  Collections: {}
  Views: {}
  Routers: {}
  init: ->
    new Cloudsdale.Routers.Root()
    new Cloudsdale.Routers.Clouds()
    Backbone.history.start({pushState: true})
    window.app = Backbone.history

$(document).ready ->
  # Initializes the notification centre
  window.nfc = new NotificationCentre()
  
  # Sets the session for the current user
  window.session = new Cloudsdale.Models.Session($('body').data().session)
  
  $(document).bind "connected:nfc", ->
    
    # Changes an attribute to the document if focused
    # Initializes as true
    window.window_focus = true
    $(window).focus(-> document.window_focus = true).blur(-> document.window_focus = false)
  
    # Initializes the root view.
    view = new Cloudsdale.Views.Root()
    $('body').replaceWith(view.el)
    
    Cloudsdale.init()
    
    # iPad, iPhone & iPod installed web-app top margin correction.
    setTimeout (->
      if (navigator.userAgent.match(/iPhone|iPod|iPad/i))
        $("body").addClass('device-mobile')
        if ("standalone" of window.navigator) and not window.navigator.standalone
          $(".main-container, body").css("top","0px")
        else
          $(".main-container, body").css("top","20px")
    ), 0